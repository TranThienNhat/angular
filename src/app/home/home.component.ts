import { NgClass, NgFor, NgIf } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, RouterLink } from '@angular/router';
import { ProductServiceService } from '../service/product.service';
import { CategoryService } from '../service/category.service';

@Component({
  selector: 'app-home',
  imports: [RouterLink, NgFor, NgIf, NgClass],
  templateUrl: './home.component.html',
  styleUrl: './home.component.css',
})
export class HomeComponent implements OnInit {
  products: any[] = [];
  categories: any[] = [];

  // Th·ª© t·ª± c·ªë ƒë·ªãnh cho categories
  private readonly FIXED_CATEGORY_ORDER = ['B√†n', 'Gh·∫ø', 'T·ªß', 'Trang tr√≠'];

  // Mapping icon cho t·ª´ng category
  private readonly CATEGORY_ICONS = {
    B√†n: 'üõí',
    Gh·∫ø: 'üõãÔ∏è',
    T·ªß: 'üóÑÔ∏è',
    'Trang tr√≠': 'ü™û',
  };

  // Mapping CSS class cho t·ª´ng category
  private readonly CATEGORY_CSS_CLASSES = {
    B√†n: 'table-card',
    Gh·∫ø: 'chair-card',
    T·ªß: 'cabin-card',
    'Trang tr√≠': 'decor-card',
  };

  constructor(
    private productService: ProductServiceService,
    private route: ActivatedRoute,
    private categoryService: CategoryService
  ) {}

  ngOnInit(): void {
    // Load categories khi component kh·ªüi t·∫°o
    this.loadCategory();

    this.route.paramMap.subscribe((params) => {
      const Id = Number(params.get('Id'));
      this.productService.getProduct(Id).subscribe((data) => {
        this.products = data;
      });
    });
  }

  /**T√≠nh to√°n ƒë·ªÉ s·ªë l∆∞·ª£ng b·∫£n sao ƒë·ªÉ tr√°nh kho·∫£ng tr·ªëng */
  getProductCopies(): number[] {
    if (this.products.length == 0) {
      return [];
    }
    /**T√≠nh to√°n s·ªë b·∫£n sao c·∫ßn thi·∫øt */
    const minProductstoshow = 15;
    const copiesNeeded = Math.max(
      3,
      Math.ceil(minProductstoshow / this.products.length)
    );
    //Tr·∫£ v·ªÅ m·∫£ng c√°c s·ªë ƒë·ªÉ cho NgFor c√≥ th·ªÉ l·∫∑p
    return Array(copiesNeeded)
      .fill(0)
      .map((_, index) => index);
  }

  // H√†m s·∫Øp x·∫øp categories theo th·ª© t·ª± c·ªë ƒë·ªãnh
  private sortCategoriesByFixedOrder(categories: any[]): any[] {
    return categories.sort((a, b) => {
      const indexA = this.FIXED_CATEGORY_ORDER.indexOf(a.Name);
      const indexB = this.FIXED_CATEGORY_ORDER.indexOf(b.Name);

      const priorityA = indexA === -1 ? 999 : indexA;
      const priorityB = indexB === -1 ? 999 : indexB;

      return priorityA - priorityB;
    });
  }

  // Getter ƒë·ªÉ l·∫•y categories ƒë√£ s·∫Øp x·∫øp
  get sortedCategories() {
    return this.sortCategoriesByFixedOrder([...this.categories]);
  }

  // H√†m l·∫•y icon cho category
  getCategoryIcon(categoryName: string): string {
    return (
      this.CATEGORY_ICONS[categoryName as keyof typeof this.CATEGORY_ICONS] ||
      'üì¶'
    );
  }

  // H√†m l·∫•y CSS class cho category card
  getCategoryCssClass(categoryName: string): string {
    return (
      this.CATEGORY_CSS_CLASSES[
        categoryName as keyof typeof this.CATEGORY_CSS_CLASSES
      ] || 'default-card'
    );
  }

  loadCategory(): void {
    this.categoryService.getCategory().subscribe({
      next: (data) => {
        // S·∫Øp x·∫øp categories ngay khi nh·∫≠n t·ª´ API
        this.categories = this.sortCategoriesByFixedOrder(data);
      },
      error: (error) => {
        alert('Kh√¥ng th·ªÉ l·∫•y danh m·ª•c');
      },
    });
  }
}
